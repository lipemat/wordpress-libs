#!/bin/bash

#####################################################################################
#
# Test our code against various unit test systems and linters and prevent commit
# if any of them fail.
#
# @uses Global PHP version as different projects have different requirements.
#
# @version 5.3.0
#
#####################################################################################

GREEN="$(tput setaf 2)"
WHITE="$(tput setaf 7)"
YELLOW="$(tput setaf 3)"
RED="$(tput setaf 1)"
BLUE="$(tput setaf 6)"
RESET_COLOR="$(tput sgr0)"

PHP='php'
PHPCS='phpcs'
PHPSTAN='phpstan'
PHPUNIT='phpunit'

PROJECT=$(${PHP} -r "echo dirname(realpath('$0'), 3);")
## Fix windows paths
PROJECT=${PROJECT//\\//}

PHP_FILES=$(git diff-index --cached --name-only --diff-filter=ACMR HEAD | grep \\.php)
RESOURCE_FILES=$(git diff-index --cached --name-only HEAD | grep "\.js$\|\.jsx$\|\.ts$\|\.tsx$\|\.pcss$")

if [[ ! "$PHP_FILES" ]]; then
    echo "${YELLOW}[pre-commit]${BLUE} No Lintable PHP Files Changed ${RESET_COLOR}"
fi
if [[ ! "$RESOURCE_FILES" ]]; then
    echo "${YELLOW}[pre-commit]${BLUE} No Resource Files Changed ${RESET_COLOR}"
fi

function exit_reset_colors() {
	echo ${RESET_COLOR}
	exit 1
}

function php_unit() {
    if [[ ! -f ${PROJECT}/dev/wp-unit/phpunit.xml ]] && [[ ! -f ${PROJECT}/dev/wp-unit/phpunit.xml.dist ]]; then
        echo "${YELLOW}[pre-commit]${RED} ${PROJECT}/dev/wp-unit/phpunit.xml or ${PROJECT}/dev/wp-unit/phpunit.xml.dist not found!"
        exit_reset_colors
    fi
    echo "${YELLOW}[pre-commit]${BLUE} Running PHP Unit... ${WHITE}"
    cd "${PROJECT}/dev/wp-unit" || exit
    OUTPUT=$(${PHPUNIT})
    if [[ $? != 0 ]]; then
        echo
        echo "${BLUE}PHP Unit Failed! Fix the error before commit!"
        echo "${RED}$OUTPUT"
        exit_reset_colors
    fi
    echo "${YELLOW}[pre-commit]${GREEN} PHP Unit Tests Passed!${WHITE}"
}
php_unit &

function php_lint() {
	if [[ "$PHP_FILES" ]]; then
		# Run php lint.
		echo "${YELLOW}[pre-commit]${BLUE} Checking ${1} Lint... ${WHITE}"
		for FILE in ${PHP_FILES}; do
			OUTPUT=$(${1} -l -d display_errors=0 ${PROJECT}/${FILE})
			if [[ $? != 0 ]]; then
				echo
				echo "${BLUE}${1} Lint Failed. Fix the error before commit."
				echo "${RED}$OUTPUT"
				exit_reset_colors
			fi
		done
		echo "${YELLOW}[pre-commit]${GREEN} ${1} Lint Passed!${WHITE}"
	fi
}

# Lint multiple versions of PHP if supported via environmental variables.
if [[ "true" == "$PHP_MULTI_VERSION_SUPPORT" ]]; then
	php_lint 'php 8.1' &
	php_lint 'php 8.3' &
else
	php_lint 'php' &
fi

function php_code_sniffer() {
    if [[ "$PHP_FILES" ]]; then
        if [[ ! -f ${PROJECT}/phpcs.xml ]] && [[ ! -f ${PROJECT}/phpcs.xml.dist ]]; then
            echo "${YELLOW}[pre-commit]${RED} ${PROJECT}/phpcs.xml or ${PROJECT}/phpcs.xml.dist not found!"
            exit_reset_colors
        fi
        for FILE in ${PHP_FILES}; do
            FILES="$FILES ${PROJECT}/${FILE}"
        done
        echo "${YELLOW}[pre-commit]${BLUE} Running PHPCS... ${WHITE}"
        OUTPUT=$(${PHPCS} --encoding=utf-8 -s -p)
        if [[ $? != 0 ]]; then
            echo
            echo "${BLUE}PHPCS failed. Fix the error before commit!"
            echo "${RED}$OUTPUT"
            echo
            echo "${YELLOW}For automatic fixes run"
            echo
            echo "${WHITE}phpcbf${FILES}"
            echo
            exit_reset_colors
        fi
        echo "${YELLOW}[pre-commit]${GREEN} PHPCS Passed!${RESET_COLOR}"
    fi
}
php_code_sniffer &

function php_stan() {
        echo "${YELLOW}[pre-commit]${BLUE} Running PHP Stan... ${WHITE}"
        OUTPUT=$(${PHPSTAN} analyse --no-progress --memory-limit=2G)
        if [[ $? != 0 ]]; then
            echo
            echo "${BLUE}PHP Stan Failed. Fix the error before commit."
            echo "${RED}$OUTPUT"
            exit_reset_colors
        fi
        echo "${YELLOW}[pre-commit]${GREEN} PHP Stan Passed!${RESET_COLOR}"
}
php_stan &

function js_lint() {
    if [[ "$RESOURCE_FILES" ]]; then
        echo "${YELLOW}[pre-commit]${BLUE} Running JS Lint... ${WHITE}"
        OUTPUT=$(yarn lipemat-js-boilerplate lint --fix=false 2>&1)
        if [[ $? != 0 ]]; then
            echo
            echo "${BLUE}JS Lint failed. Fix the error before commit!"
            echo "${RED}$OUTPUT"
            exit_reset_colors
        fi
        echo "${YELLOW}[pre-commit]${GREEN} JS Lint Passed!${RESET_COLOR}"
    fi
}
js_lint &

# Go through each background task
# If it sent exit code 1, it failed and the result from `wait` will be false.
FAIL=0
for job in $(jobs -p); do
    wait "$job" || (( FAIL+=1 ))
done

echo "${RESET_COLOR}"

# If any of the background tasks failed, we exit 1
if [[ $FAIL -ne 0 ]]; then
    exit 1
else
    exit 0
fi
