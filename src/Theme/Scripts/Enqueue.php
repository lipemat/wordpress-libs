<?php
declare( strict_types=1 );

namespace Lipe\Lib\Theme\Scripts;

/**
 * Register and enqueue scripts and styles using the manifest file.
 *
 * @since    5.1.0
 *
 * @requires js-boilerplate:v9.2.0+
 * @requires postcss-boilerplate:v4.3.0+
 */
class Enqueue {
	public const BOILER_JS   = 'js';
	public const BOILER_PCSS = 'pcss';


	/**
	 * Instantiate the Enqueue class for this resource.
	 *
	 * @param ResourceHandles $handle - Current handle from within the boilerplate.
	 */
	final protected function __construct(
		protected readonly ResourceHandles $handle
	) {
	}


	/**
	 * Enqueue the current script or style with WP_Scripts.
	 *
	 * @param bool $in_footer - Load a JS script in the footer. Does not apply to CSS.
	 *
	 * @return void
	 */
	public function enqueue( bool $in_footer = true ): void {
		$this->get_manifest()->enqueue( $in_footer );
	}


	/**
	 * Register the current script or style with WP_Scripts.
	 *
	 * Used when a resource should be registered but not enqueued.
	 *
	 * @return void
	 */
	public function register(): void {
		if ( \str_ends_with( $this->handle->file(), '.js' ) ) {
			wp_register_script( $this->handle->handle(), $this->get_manifest()->get_url(), $this->handle->dependencies(), $this->get_version(), true );
		} else {
			wp_register_style( $this->handle->handle(), $this->get_manifest()->get_url(), $this->handle->dependencies(), $this->get_version() );
		}
	}


	/**
	 * Return the path of the file relative to the theme.
	 *
	 * @param bool $full_path - Include a full path to the file.
	 *
	 * @return string
	 */
	public function get_file( bool $full_path = false ): string {
		return $this->get_manifest()->get_file( $full_path );
	}


	/**
	 * Get a version of the resource from the `hash` in
	 * the manifest file.
	 *
	 * If the hash does not exist, fallback to the root
	 * .revision file.
	 *
	 * @return string
	 */
	public function get_version(): string {
		return $this->get_manifest()->get_version();
	}


	/**
	 * Get the integrity for the script generated by the JS app.
	 *
	 * @return string
	 */
	public function get_integrity(): string {
		return $this->get_manifest()->get_integrity();
	}


	/**
	 * Get the manifest files generated by:
	 * - Webpack `dist`.
	 * - PostCSS `dist`.
	 *
	 * @todo In version 6, kill this method in favor of using the handle method.
	 *
	 * @internal
	 *
	 * @return Manifest
	 */
	public function get_manifest(): Manifest {
		if ( \method_exists( $this->handle,
			'get_manifest' ) ) {
			return $this->handle->get_manifest();
		}

		if ( self::BOILER_PCSS === $this->handle->boilerplate() ) {
			return new PCSS_Manifest( $this->handle );
		}
		return new JS_Manifest( $this->handle );
	}


	/**
	 * Instantiate the Enqueue class for this resource.
	 *
	 * @param ResourceHandles $handle - Current handle from within the boilerplate.
	 */
	public static function factory( ResourceHandles $handle ): static {
		return new static( $handle );
	}
}
